{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this.addNewCard = data => {\n      return fetch(`${this._baseUrl}/cards`, {\n        method: \"POST\",\n        headers: this._headers,\n        body: JSON.stringify({\n          name: data.place,\n          link: data.link\n        })\n      }).then(this._checkResponse);\n    };\n    this._baseUrl = baseUrl;\n    // this._headers = headers;\n    // this._authorization = headers.authorization;\n    // \"Content-Type\" = \"application/json\";\n    // \"Authorization\" = `Bearer ${token}`\n  }\n\n  _checkResponse(res) {\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getCard(jwt) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"GET\",\n      headers: {\n        // authorization: this._authorization,\n        \"Authorization\": `Bearer ${jwt}`\n      }\n    }).then(this._checkResponse);\n  }\n  deleteCardItem(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._authorization\n      }\n    }).then(this._checkResponse);\n  }\n  getUserInfo(jwt) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      headers: {\n        // authorization: this._authorization,\n        \"Authorization\": `Bearer ${jwt}`\n      }\n    }).then(this._checkResponse);\n  }\n  getAppInfo() {\n    return Promise.all([this.getCard(localStorage.jwt), this.getUserInfo(localStorage.jwt)]);\n  }\n  setUserInfo(data, jwt) {\n    return fetch(`http://localhost:3000/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Authorization\": `Bearer ${jwt}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        //\n        name: data.name,\n        //\n        about: data.about\n      })\n    }).then(this._checkResponse);\n  }\n  setUserAvatar(data, jwt) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        \"Authorization\": `Bearer ${jwt}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n  changeLikeCardStatus(id, isLiked, jwt) {\n    if (!isLiked) {\n      return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n        method: \"PUT\",\n        headers: {\n          \"Authorization\": `Bearer ${jwt}`\n        }\n      }).then(this._checkResponse);\n    } else {\n      return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${jwt}`\n        }\n      }).then(this._checkResponse);\n    }\n  }\n}\nconst api = new Api({\n  // baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-66\",\n  baseUrl: \"http://localhost:3000\"\n  // headers: {\n  //   \"Authorization\": `Bearer ${token}`,\n  //   \"Content-Type\": \"application/json\",\n  // },\n});\n\nexport default api;","map":{"version":3,"names":["Api","constructor","_ref","baseUrl","headers","addNewCard","data","fetch","_baseUrl","method","_headers","body","JSON","stringify","name","place","link","then","_checkResponse","res","ok","json","Promise","reject","status","getCard","jwt","deleteCardItem","id","authorization","_authorization","getUserInfo","getAppInfo","all","localStorage","setUserInfo","about","setUserAvatar","avatar","changeLikeCardStatus","isLiked","api"],"sources":["C:/Users/Дарья/dev/react-mesto-api-full-gha/frontend/src/utils/api.js"],"sourcesContent":["class Api {\r\n  constructor({ baseUrl, headers }) {\r\n    this._baseUrl = baseUrl;\r\n    // this._headers = headers;\r\n    // this._authorization = headers.authorization;\r\n    // \"Content-Type\" = \"application/json\";\r\n    // \"Authorization\" = `Bearer ${token}`\r\n  }\r\n\r\n  _checkResponse(res) {\r\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n\r\n  getCard(jwt) {\r\n    return fetch(`${this._baseUrl}/cards`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        // authorization: this._authorization,\r\n        \"Authorization\" : `Bearer ${jwt}`\r\n      },\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  addNewCard = (data) => {\r\n    return fetch(`${this._baseUrl}/cards`, {\r\n      method: \"POST\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: data.place,\r\n        link: data.link,\r\n      }),\r\n    }).then(this._checkResponse);\r\n  };\r\n\r\n  deleteCardItem(id) {\r\n    return fetch(`${this._baseUrl}/cards/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        authorization: this._authorization,\r\n      },\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  getUserInfo(jwt) {\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        // authorization: this._authorization,\r\n        \"Authorization\" : `Bearer ${jwt}`\r\n      },\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  getAppInfo() {\r\n    return Promise.all([this.getCard(localStorage.jwt), this.getUserInfo(localStorage.jwt)]);\r\n  }\r\n\r\n  setUserInfo(data, jwt) {\r\n    return fetch(`http://localhost:3000/users/me`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Authorization\" : `Bearer ${jwt}`,\r\n        \"Content-Type\" : \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        //\r\n        name: data.name,\r\n        //\r\n        about: data.about,\r\n      }),\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  setUserAvatar(data, jwt) {\r\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Authorization\" : `Bearer ${jwt}`,\r\n        \"Content-Type\" : \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: data.avatar,\r\n      }),\r\n    }).then(this._checkResponse);\r\n  }\r\n\r\n  changeLikeCardStatus(id, isLiked, jwt) {\r\n    if (!isLiked) {\r\n      return fetch(`${this._baseUrl}/cards/${id}/likes`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Authorization\" : `Bearer ${jwt}`        },\r\n        }).then(this._checkResponse);\r\n    } else {\r\n      return fetch(`${this._baseUrl}/cards/${id}/likes`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Authorization\" : `Bearer ${jwt}`\r\n        },\r\n        }).then(this._checkResponse);\r\n    }\r\n  }\r\n}\r\n\r\nconst api = new Api({\r\n  // baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-66\",\r\n  baseUrl: \"http://localhost:3000\",\r\n  // headers: {\r\n  //   \"Authorization\": `Bearer ${token}`,\r\n  //   \"Content-Type\": \"application/json\",\r\n  // },\r\n});\r\n\r\nexport default api;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}